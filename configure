#!/bin/sh

# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.

LC_ALL=C
export LC_ALL

#options脚本定义后续工作需要用到的变量
#根据本次调用configure时携带的参数与默认值设置这些变量
. auto/options
#init脚本初始化后续工作需要的一些文件路径
. auto/init
#sources分析nginx源码结构,该脚本将.c/.h代码文件分类，并定义为对应的变量数组
. auto/sources

# 测试并创建$NGX_OBJS目录,该目录用来存储编译过程中所有目标文件的路径
test -d $NGX_OBJS || mkdir -p $NGX_OBJS

# 以下两个变量定义在auto/init脚本里,分别是ngx_auto_headers.h,autoconf.err文件
echo > $NGX_AUTO_HEADERS_H
echo > $NGX_AUTOCONF_ERR
# 向ngx_auto_headers.h文件写入命令行参数
echo "#define NGX_CONFIGURE \"$NGX_CONFIGURE\"" > $NGX_AUTO_CONFIG_H

# 关于DEBUG宏
if [ $NGX_DEBUG = YES ]; then
    have=NGX_DEBUG . auto/have
fi

# checking for os
if test -z "$NGX_PLATFORM"; then
    echo "checking for OS"

    NGX_SYSTEM=`uname -s 2>/dev/null`
    NGX_RELEASE=`uname -r 2>/dev/null`
    NGX_MACHINE=`uname -m 2>/dev/null`
    # 输出操作系统相关信息
    echo " + $NGX_SYSTEM $NGX_RELEASE $NGX_MACHINE"

    NGX_PLATFORM="$NGX_SYSTEM:$NGX_RELEASE:$NGX_MACHINE";

    case "$NGX_SYSTEM" in
        MINGW32_* | MINGW64_* | MSYS_*)
            NGX_PLATFORM=win32
        ;;
    esac

else
    echo "building for $NGX_PLATFORM"
    NGX_SYSTEM=$NGX_PLATFORM
fi

# 检查并设置编译器
. auto/cc/conf

# 非win操作系统定义一些头文件
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/headers
fi
# 对于当前的操作系统,设置操作系统特定的一些方法并检查是否支持。
# 例如linux特有的sendfile系统调用来加速向网络中发送文件块。
. auto/os/conf

# unix/linux操作系统相关的头文件与系统调用设置
if [ "$NGX_PLATFORM" != win32 ]; then
    . auto/unix
fi

# 线程相关的支持设置
. auto/threads
##########################
# 最核心的构造部分
# 生成ngx_modules.c文件
# 定义了ngx_modules数组
##########################
. auto/modules
# 在链接时需要的第三方静态，动态库或者目标文件是否存在
. auto/lib/conf

# nginx安装后的路径
case ".$NGX_PREFIX" in
    .)
        NGX_PREFIX=${NGX_PREFIX:-/usr/local/nginx}
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;

    .!)
        NGX_PREFIX=
    ;;

    *)
        have=NGX_PREFIX value="\"$NGX_PREFIX/\"" . auto/define
    ;;
esac

# nginx安装后conf文件的路径
if [ ".$NGX_CONF_PREFIX" != "." ]; then
    have=NGX_CONF_PREFIX value="\"$NGX_CONF_PREFIX/\"" . auto/define
fi

# nginx安装后，其它一些文件路径参数设置
have=NGX_SBIN_PATH value="\"$NGX_SBIN_PATH\"" . auto/define
have=NGX_CONF_PATH value="\"$NGX_CONF_PATH\"" . auto/define
have=NGX_PID_PATH value="\"$NGX_PID_PATH\"" . auto/define
have=NGX_LOCK_PATH value="\"$NGX_LOCK_PATH\"" . auto/define
have=NGX_ERROR_LOG_PATH value="\"$NGX_ERROR_LOG_PATH\"" . auto/define

have=NGX_HTTP_LOG_PATH value="\"$NGX_HTTP_LOG_PATH\"" . auto/define
have=NGX_HTTP_CLIENT_TEMP_PATH value="\"$NGX_HTTP_CLIENT_TEMP_PATH\""
. auto/define
have=NGX_HTTP_PROXY_TEMP_PATH value="\"$NGX_HTTP_PROXY_TEMP_PATH\""
. auto/define
have=NGX_HTTP_FASTCGI_TEMP_PATH value="\"$NGX_HTTP_FASTCGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_UWSGI_TEMP_PATH value="\"$NGX_HTTP_UWSGI_TEMP_PATH\""
. auto/define
have=NGX_HTTP_SCGI_TEMP_PATH value="\"$NGX_HTTP_SCGI_TEMP_PATH\""
. auto/define

# 创建编译时使用的objs/Makefile文件
. auto/make
# 为objs/Makefile加入需要连接的第三方静态库，动态库或者目标文件
. auto/lib/make
# 为objs/Makefile加入install功能，当执行make
# install时将编译生成的必要文件复制到安装路径，建立必要的目录
. auto/install

# STUB
# 在ngx_auto_config.h文件中加入NGX_SUPPRESS_WARN宏，NGX_SMP宏
. auto/stubs

# 在ngx_auto_config.h文件中指定NGX_USER和NGX_GROUP宏，
# 如果执行configure时没有参数指定，
# 默认两者皆为nobody(也就是默认以nobody用户运行进程)
have=NGX_USER value="\"$NGX_USER\"" . auto/define
have=NGX_GROUP value="\"$NGX_GROUP\"" . auto/define

if [ ".$NGX_BUILD" != "." ]; then
    have=NGX_BUILD value="\"$NGX_BUILD\"" . auto/define
fi

# 显示configure执行的结果，如果失败，则给出失败原因
. auto/summary
